---
- name: Install postgresql and create a database in DB server
  hosts: database
  become: true
  vars_files:
    - ansible_vars.yaml

  tasks:
    - name: Install PostgreSQL and dependencies
      apt:
        name:
          - postgresql
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: Locate pg_hba.conf
      shell: |
        find /etc/postgresql /var/lib/pgsql -name pg_hba.conf 2>/dev/null | head -n1
      register: pg_hba_path

    - name: Check if PostgreSQL is still using peer authentication
      shell: |
        grep -E '^local\s+all\s+postgres\s+peer' {{ pg_hba_path.stdout }}
      register: is_peer_auth
      failed_when: false
      changed_when: false

    - name: Set postgres password using peer (first run)
      command: >
        sudo -u postgres psql -c "ALTER USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}';"
      when: is_peer_auth.rc == 0

    - name: Set postgres password using md5 (next runs)
      command: >
        psql -U {{ postgres_user }} -h localhost -p {{ postgres_port }} -c "ALTER USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}';"
      environment:
        PGPASSWORD: "{{ postgres_password }}"
      when: is_peer_auth.rc != 0

    - name: Replace 'peer' with 'md5' for postgres local login
      replace:
        path: "{{ pg_hba_path.stdout }}"
        regexp: '^local\s+all\s+postgres\s+peer'
        replace: 'local   all   postgres   md5'

    - name: Allow TCP connections with md5 authentication
      lineinfile:
        path: "{{ pg_hba_path.stdout }}"
        line: 'host    all    all    0.0.0.0/0    md5'
        insertafter: EOF
        state: present
    
    - name: Set listen_addresses to allow remote connections
      lineinfile:
        path: /etc/postgresql/16/main/postgresql.conf
        regexp: '^#?listen_addresses\s*='
        line: "listen_addresses = '*'"

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

    - name: Create the database
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        state: present
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: localhost
        login_port: "{{ postgres_port }}"

    - name: Create 'customers' table in the database
      community.postgresql.postgresql_table:
        name: customers
        state: present
        db: "{{ db_name }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: localhost
        login_port: "{{ postgres_port }}"
        columns:
          - "id serial PRIMARY KEY"
          - "name varchar(50)"
          - "birthdate date"


- name: Install Apache and PHP in Web server
  hosts: webserver
  become: true

  tasks:
    - name: Install Apache
      ansible.builtin.apt:
        name: apache2
        state: present

    - name: Install PHP and required extensions
      ansible.builtin.apt:
        name:
          - php
          - libapache2-mod-php
          - php-pgsql
        state: present

    - name: Enable Apache rewrite module
      ansible.builtin.command:
        cmd: a2enmod rewrite

    - name: Restart Apache service
      ansible.builtin.service:
        name: apache2
        state: restarted


- name: Create PHP test connection with database
  hosts: webserver
  become: true
  vars_files:
    - ansible_vars.yaml

  tasks:
    - name: Create a PHP file to test database connection
      ansible.builtin.copy:
        dest: /var/www/html/test_db_connection.php
        content: |
          <?php
          $host = '{{ db_host }}';
          $port = '{{ postgres_port }}';
          $dbname = '{{ db_name }}';
          $user = '{{ postgres_user }}';
          $password = '{{ postgres_password }}';

          $conn = pg_connect("host=$host port=$port dbname=$dbname user=$user password=$password");

          if (!$conn) {
              echo "An error occurred while connecting to the database.";
              exit;
          }
          echo "Connection to the database was successful!"; "<br>";

          $res = pg_query($conn, "SELECT * FROM customers;");
              while ($row = pg_fetch_assoc($res)) {
                  echo $row['id'] . " - " . $row['name'] . " - " . $row['birthdate'] . "<br>";
              }
          pg_close($conn);
          ?>

- name: Install and configure Snort, iptables and SIEM-like tool in the security_monitor server
  hosts: security_monitor
  become: true
  vars_files:
    - ansible_vars.yaml

  tasks:
    - name: Install Snort
      ansible.builtin.apt:
        name: snort
        state: present
        update_cache: yes

    - name: Configure Snort to log alerts
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.conf
        regexp: '^output unified2'
        line: 'output unified2: filename snort_alerts.log, limit 128'

    - name: Set Snort to run in IDS mode
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.conf
        regexp: '^# config mode'
        line: 'config mode: ids'

    - name: Set HOME_NET CIDR
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.debian.conf
        regexp: '^DEBIAN_SNORT_HOME_NET='
        line: 'DEBIAN_SNORT_HOME_NET="172.16.0.0/16"'

    - name: Set interface for Snort
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.debian.conf
        regexp: '^DEBIAN_SNORT_INTERFACE='
        line: 'DEBIAN_SNORT_INTERFACE={{ snort_interface }}'

    - name: Run Snort in background (IDS mode)
      ansible.builtin.shell: |
        nohup snort -A console -q -c /etc/snort/snort.conf -i {{ snort_interface }} > /var/log/snort_background.log 2>&1 &
      args:
        creates: /var/log/snort_background.log

    - name: Install iptables-persistent
      ansible.builtin.apt:
        name: iptables-persistent
        state: present
        update_cache: yes

    - name: Save current iptables rules
      ansible.builtin.shell: iptables-save > /etc/iptables/rules.v4

    - name: Allow Snort to run on port 80
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 80
        jump: ACCEPT
    - name: Allow Snort to run on port 5432
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 5432
        jump: ACCEPT
    - name: Allow Snort to run on port 22
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 22
        jump: ACCEPT


- name: Install sqlmap in the attacker server
  hosts: attacker
  become: true

  tasks:
    - name: Install sqlmap
      ansible.builtin.apt:
        name: sqlmap
        state: present
        update_cache: yes