---
- name: Install postgresql and create a database in DB server
  hosts: database
  become: true
  vars_files:
    - ansible_vars.yaml

  tasks:
    - name: Install PostgreSQL and dependencies
      apt:
        name:
          - postgresql
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: Locate pg_hba.conf
      shell: |
        find /etc/postgresql /var/lib/pgsql -name pg_hba.conf 2>/dev/null | head -n1
      register: pg_hba_path

    - name: Check if PostgreSQL is still using peer authentication
      shell: |
        grep -E '^local\s+all\s+postgres\s+peer' {{ pg_hba_path.stdout }}
      register: is_peer_auth
      failed_when: false
      changed_when: false

    - name: Set postgres password using peer (first run)
      command: >
        sudo -u postgres psql -c "ALTER USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}';"
      when: is_peer_auth.rc == 0

    - name: Set postgres password using md5 (next runs)
      command: >
        psql -U {{ postgres_user }} -h localhost -p {{ postgres_port }} -c "ALTER USER {{ postgres_user }} WITH PASSWORD '{{ postgres_password }}';"
      environment:
        PGPASSWORD: "{{ postgres_password }}"
      when: is_peer_auth.rc != 0

    - name: Replace 'peer' with 'md5' for postgres local login
      replace:
        path: "{{ pg_hba_path.stdout }}"
        regexp: '^local\s+all\s+postgres\s+peer'
        replace: 'local   all   postgres   md5'

    - name: Allow TCP connections with md5 authentication
      lineinfile:
        path: "{{ pg_hba_path.stdout }}"
        line: 'host    all    all    0.0.0.0/0    md5'
        insertafter: EOF
        state: present
    
    - name: Set listen_addresses to allow remote connections
      lineinfile:
        path: /etc/postgresql/16/main/postgresql.conf
        regexp: '^#?listen_addresses\s*='
        line: "listen_addresses = '*'"

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

    - name: Create the database
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        state: present
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: localhost
        login_port: "{{ postgres_port }}"

    - name: Create 'users' table in the database
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: localhost
        login_port: "{{ postgres_port }}"
        query: |
          CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          role VARCHAR(50) NOT NULL
          );

    - name: Insert initial users
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: localhost
        login_port: "{{ postgres_port }}"
        query: |
          INSERT INTO users (username, password, role) VALUES
          ('admin', 'password123', 'admin'),
          ('enzo.teles', '***REMOVED***', 'user'),
          ('lorena.borges', 'awes0me_t3ach3r', 'user'),
          ('gui.fornari', 'kek123%', 'user')
          ON CONFLICT (username) DO NOTHING;


- name: Install Apache and PHP in Web server
  hosts: webserver
  become: true
  vars_files:
    - ansible_vars.yaml

  tasks:
    - name: Install Apache
      ansible.builtin.apt:
        name: apache2
        state: present

    - name: Install PHP and required extensions
      ansible.builtin.apt:
        name:
          - php
          - libapache2-mod-php
          - php-pgsql
        state: present

    - name: Enable Apache rewrite module
      ansible.builtin.command:
        cmd: a2enmod rewrite

    - name: Restart Apache service
      ansible.builtin.service:
        name: apache2
        state: restarted

    - name: Copy the PHP files to the web server
      ansible.builtin.copy:
        src: ./src/
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Copy the PHP files to the web server
      ansible.builtin.copy:
        src: ./src/
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: '0644'
        
    - name: Change host in get_login.php file
      ansible.builtin.replace:
        path: /var/www/html/get_login.php
        regexp: 'localhost'
        replace: '{{ db_host }}'

    - name: Change host in post_login.php file
      ansible.builtin.replace:
        path: /var/www/html/post_login.php
        regexp: 'localhost'
        replace: '{{ db_host }}'


- name: Install and configure Snort and iptables in the webserver VM
  hosts: webserver
  become: true
  vars_files:
    - ansible_vars.yaml

  tasks:
    - name: Install Snort
      ansible.builtin.apt:
        name: snort
        state: present
        update_cache: yes

    - name: Configure Snort to log alerts
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.conf
        regexp: '^output unified2'
        line: 'output unified2: filename snort_alerts.log, limit 128'

    - name: Set HOME_NET CIDR
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.debian.conf
        regexp: '^DEBIAN_SNORT_HOME_NET='
        line: 'DEBIAN_SNORT_HOME_NET="172.16.0.0/16"'

    - name: Set interface for Snort
      ansible.builtin.lineinfile:
        path: /etc/snort/snort.debian.conf
        regexp: '^DEBIAN_SNORT_INTERFACE='
        line: 'DEBIAN_SNORT_INTERFACE={{ snort_interface }}'

    - name: Run Snort in background (IDS mode)
      ansible.builtin.shell: |
        nohup snort -A fast -q -c /etc/snort/snort.conf -i {{ snort_interface }} > /var/log/snort_background.log 2>&1 &

    - name: Install iptables-persistent
      ansible.builtin.apt:
        name: iptables-persistent
        state: present
        update_cache: yes

    - name: Save current iptables rules
      ansible.builtin.shell: iptables-save > /etc/iptables/rules.v4

    - name: Allow Snort to run on port 80
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 80
        jump: ACCEPT
    - name: Allow Snort to run on port 5432
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 5432
        jump: ACCEPT
    - name: Allow Snort to run on port 22
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 22
        jump: ACCEPT

    - name: Add rule to detect SQL injection attempts
      ansible.builtin.lineinfile:
        path: /etc/snort/rules/local.rules
        line: 'alert tcp any any -> any 80 (msg:"SQL Injection attempt detected"; content:"select"; nocase; sid:1000001; rev:1;)'

    - name: Include local rules in Snort configuration
      ansible.builtin.command:
        cmd: echo "include \$RULE_PATH/local.rules" | sudo tee -a /etc/snort/snort.conf

    - name: Restart Snort service
      ansible.builtin.systemd:
        name: snort
        state: restarted

    - name: Run Snort
      ansible.builtin.shell: |
        nohup snort -A fast -q -c /etc/snort/snort.conf -i enX0 &


- name: Install sqlmap in the attacker server
  hosts: attacker
  become: true

  tasks:
    - name: Install sqlmap
      ansible.builtin.apt:
        name: sqlmap
        state: present
        update_cache: yes

